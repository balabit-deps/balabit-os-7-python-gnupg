Backport of:

From 3003b654ca1c29b0510a54b9848571b3ad57df19 Mon Sep 17 00:00:00 2001
From: Vinay Sajip <vinay_sajip@yahoo.co.uk>
Date: Wed, 23 Jan 2019 19:35:49 +0000
Subject: [PATCH] Expand passphrase check to include NUL bytes.

---
 gnupg.py      | 3 ++-
 test_gnupg.py | 8 ++++++++
 3 files changed, 12 insertions(+), 2 deletions(-)

--- a/gnupg.py
+++ b/gnupg.py
@@ -947,7 +947,8 @@ class GPG(object):
         it is passed in a pipe to gpg, and so not checking could lead to
         spoofing attacks by passing arbitrary text after passphrase and newline.
         """
-        return ('\n' not in passphrase and '\r' not in passphrase)
+        return ('\n' not in passphrase and '\r' not in passphrase and
+                '\x00' not in passphrase)
 
     def sign_file(self, file, keyid=None, passphrase=None, clearsign=True,
                   detach=False, binary=False, output=None, extra_args=None):
--- a/test_gnupg.py
+++ b/test_gnupg.py
@@ -446,6 +446,8 @@ class GPGTestCase(unittest.TestCase):
         data = data.encode(gpg.encoding)
         edata = str(gpg.encrypt(data, barbara))
         self.assertNotEqual(data, edata, "Data must have changed")
+        self.assertRaises(ValueError, gpg.decrypt, edata, passphrase="bbr\x00own")
+        self.assertRaises(ValueError, gpg.decrypt, edata, passphrase="bbr\rown")
         self.assertRaises(ValueError, gpg.decrypt, edata, passphrase="bbr\nown")
         ddata = gpg.decrypt(edata, passphrase="bbrown")
         if data != ddata.data:  # pragma: no cover
@@ -462,6 +464,10 @@ class GPGTestCase(unittest.TestCase):
         # Test symmetric encryption
         data = "chippy was here"
         self.assertRaises(ValueError, gpg.encrypt, data, None,
+                          passphrase='bbr\x00own', symmetric=True)
+        self.assertRaises(ValueError, gpg.encrypt, data, None,
+                          passphrase='bbr\rown', symmetric=True)
+        self.assertRaises(ValueError, gpg.encrypt, data, None,
                           passphrase='bbr\nown', symmetric=True)
         edata = str(gpg.encrypt(data, None, passphrase='bbrown', symmetric=True))
         ddata = gpg.decrypt(edata, passphrase='bbrown')
@@ -563,6 +569,8 @@ class GPGTestCase(unittest.TestCase):
         else:
             data = unicode('Hello, Andr√©', self.gpg.encoding)
         data = data.encode(self.gpg.encoding)
+        self.assertRaises(ValueError, self.gpg.sign, data, keyid=key.fingerprint, passphrase="bbr\x00own")
+        self.assertRaises(ValueError, self.gpg.sign, data, keyid=key.fingerprint, passphrase="bbr\rown")
         self.assertRaises(ValueError, self.gpg.sign, data, keyid=key.fingerprint, passphrase="bbr\nown")
         sig = self.gpg.sign(data, keyid=key.fingerprint, passphrase='bbrown')
         self.assertFalse(sig, "Bad passphrase should fail")
