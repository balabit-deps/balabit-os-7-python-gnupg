Backport of:

From 39eca266dd837e2ad89c94eb17b7a6f50b25e7cf Mon Sep 17 00:00:00 2001
From: Vinay Sajip <vinay_sajip@yahoo.co.uk>
Date: Wed, 23 Jan 2019 14:16:48 +0000
Subject: [PATCH] Added checks to disallow newline-type characters in
 passphrases.

---
 gnupg.py      | 21 +++++++++++++++++++--
 test_gnupg.py |  4 ++++
 3 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/gnupg.py b/gnupg.py
index 73fc549..78ae4a9 100644
--- a/gnupg.py
+++ b/gnupg.py
@@ -27,7 +27,7 @@ Vinay Sajip to make use of the subproces
 and so does not work on Windows). Renamed to gnupg.py to avoid confusion with
 the previous versions.
 
-Modifications Copyright (C) 2008-2017 Vinay Sajip. All rights reserved.
+Modifications Copyright (C) 2008-2019 Vinay Sajip. All rights reserved.
 
 A unittest harness (test_gnupg.py) has also been added.
 """
@@ -941,9 +941,19 @@ class GPG(object):
             args.extend(['--yes'])
         args.extend(['--output', no_quote(output)])
 
+    def is_valid_passphrase(self, passphrase):
+        """
+        Confirm that the passphrase doesn't contain newline-type characters -
+        it is passed in a pipe to gpg, and so not checking could lead to
+        spoofing attacks by passing arbitrary text after passphrase and newline.
+        """
+        return ('\n' not in passphrase and '\r' not in passphrase)
+
     def sign_file(self, file, keyid=None, passphrase=None, clearsign=True,
                   detach=False, binary=False, output=None, extra_args=None):
         """sign file"""
+        if passphrase and not self.is_valid_passphrase(passphrase):
+            raise ValueError('Invalid passphrase')
         logger.debug("sign_file: %s", file)
         if binary:  # pragma: no cover
             args = ['-s']
@@ -1095,6 +1105,8 @@ class GPG(object):
         return result
 
     def delete_keys(self, fingerprints, secret=False, passphrase=None):
+        if passphrase and not self.is_valid_passphrase(passphrase):
+            raise ValueError('Invalid passphrase')
         which='key'
         if secret:  # pragma: no cover
             if self.version >= (2, 1) and passphrase is None:
@@ -1129,7 +1141,8 @@ class GPG(object):
         Since GnuPG 2.1, you can't export secret keys without providing a
         passphrase.
         """
-
+        if passphrase and not self.is_valid_passphrase(passphrase):
+            raise ValueError('Invalid passphrase')
         which=''
         if secret:
             which='-secret-key'
@@ -1359,6 +1372,8 @@ class GPG(object):
             always_trust=False, passphrase=None,
             armor=True, output=None, symmetric=False, extra_args=None):
         "Encrypt the message read from the file-like object 'file'"
+        if passphrase and not self.is_valid_passphrase(passphrase):
+            raise ValueError('Invalid passphrase')
         args = ['--encrypt']
         if symmetric:
             # can't be False or None - could be True or a cipher algo value
@@ -1447,6 +1462,8 @@ class GPG(object):
 
     def decrypt_file(self, file, always_trust=False, passphrase=None,
                      output=None, extra_args=None):
+        if passphrase and not self.is_valid_passphrase(passphrase):
+            raise ValueError('Invalid passphrase')
         args = ["--decrypt"]
         if output:  # write the output to a file with the specified name
             self.set_output_without_confirmation(args, output)
--- a/test_gnupg.py
+++ b/test_gnupg.py
@@ -446,6 +446,7 @@ class GPGTestCase(unittest.TestCase):
         data = data.encode(gpg.encoding)
         edata = str(gpg.encrypt(data, barbara))
         self.assertNotEqual(data, edata, "Data must have changed")
+        self.assertRaises(ValueError, gpg.decrypt, edata, passphrase="bbr\nown")
         ddata = gpg.decrypt(edata, passphrase="bbrown")
         if data != ddata.data:  # pragma: no cover
             logger.debug("was: %r", data)
@@ -460,6 +461,8 @@ class GPGTestCase(unittest.TestCase):
         logger.debug("test_encryption_and_decryption ends")
         # Test symmetric encryption
         data = "chippy was here"
+        self.assertRaises(ValueError, gpg.encrypt, data, None,
+                          passphrase='bbr\nown', symmetric=True)
         edata = str(gpg.encrypt(data, None, passphrase='bbrown', symmetric=True))
         ddata = gpg.decrypt(edata, passphrase='bbrown')
         self.assertEqual(data, str(ddata))
@@ -560,6 +563,7 @@ class GPGTestCase(unittest.TestCase):
         else:
             data = unicode('Hello, Andr√©', self.gpg.encoding)
         data = data.encode(self.gpg.encoding)
+        self.assertRaises(ValueError, self.gpg.sign, data, keyid=key.fingerprint, passphrase="bbr\nown")
         sig = self.gpg.sign(data, keyid=key.fingerprint, passphrase='bbrown')
         self.assertFalse(sig, "Bad passphrase should fail")
         sig = self.gpg.sign(data, keyid=key.fingerprint, passphrase='aable')
